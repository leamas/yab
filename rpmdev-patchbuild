#!/usr/bin/env python3

# pylint: disable=invalid-name

'''Synchronize patchset between RPM spec file and a build tree. '''

import argparse
import glob
import os
import os.path
import re
import shutil
import subprocess
import sys


class Backend(object):
    ''' Responsible for setting up a build tree with the patch series and
    to re-export the modified list of patches when those are imported to
    specfile.
    '''

    RPMBUILD_BP_CMD = \
        'rpmbuild -bp --nodeps -D "_sourcedir {pwd}" ' \
        '-D "_builddir {builddir}" {spec}'
    TEMP_SPEC = 'unpack.spec'

    def __init__(self, workdir):
        self.workdir = os.path.abspath(workdir)
        self.patchdir = os.path.join(self.workdir, 'patches')

    @property
    def builddir(self):
        ''' Return path to unpacked sources under self.workdir. '''

        paths = glob.glob(os.path.join(self.workdir, '*'))
        paths = [p for p in paths
                 if not (p == 'patches' or p.endswith(self.TEMP_SPEC))]
        return paths[0] if paths else None

    def workdir_setup(self):
        ''' Setup the work directory... '''

        if os.path.exists(self.workdir):
            shutil.rmtree(self.workdir)
        os.makedirs(self.workdir)

    def run_rpmbuild_bp(self, lines):
        ''' Run rpmbuild -bp on the patched spec, implements export. '''

        specfile = os.path.join(self.workdir, self.TEMP_SPEC)
        with open(specfile, 'w') as f:
            f.write("".join(lines))
        cmd = self.RPMBUILD_BP_CMD.format(pwd=os.getcwd(),
                                          builddir=self.workdir,
                                          spec=specfile)
        print("Running: " + cmd)
        subprocess.check_call(cmd, shell=True)

    def export(self, spec_lines, spec_patches):
        ''' Given a copy of the spec file lines + parsed patches, implement
        the 'export' command.
        '''
        self.workdir_setup()
        bp_lines = self.bp_specfile(spec_lines, spec_patches)
        self.run_rpmbuild_bp(bp_lines)

    def init(self, args):
        ''' General setup done on every run. '''
        pass

    def reset(self, args):     # pylint: disable=no-self-use,unused-argument
        ''' Reset existing patchset and generate a new from SCM repo. '''
        print('Command "reset" is not implemented in this mode')

    def bp_specfile(self, spec_lines, patches):
        ''' Return a spec file with all %patch lines changed to apply a
        patch according to current backend.
        '''
        pass   # abstract


class QuiltBackend(Backend):
    ''' Quilt backend implementation. '''

    QUILT_IMPORT = "quilt --quiltrc - import {path}; quilt --quiltrc - push\n"

    def bp_specfile(self, spec_lines, patches):
        ''' Implements Backend.bp_specfile. '''

        for ix, patch in _spec_patchlines(spec_lines, patches):
            spec_lines[ix] = self.QUILT_IMPORT.format(path=patch.path)
        os.environ['QUILT_PATCHES'] = self.patchdir
        return spec_lines

    def get_patches(self):
        ''' Return build tree patch list. '''

        patches = []
        paths = glob.glob(self.workdir + "/patches/series")
        if len(paths) != 1:
            print("Error: cannot locate series file (problems ahead).")
            series = []
        else:
            with open(paths[0]) as f:
                series = f.readlines()
            series = [s.strip() for s in series]
        for p in glob.glob(self.workdir + "/patches/*"):
            if p.endswith('/series'):
                continue
            patch = Patch(p)
            if patch.basename in series:
                patches.append(patch)
        return patches


class AutosetupBackend(Backend):
    ''' Autosetup backend implementation. '''

    def bp_specfile(self, spec_lines, patches):
        ''' Implements Backend.bp_specfile. '''
        # pylint: disable=unused-argument
        return spec_lines

    def get_patches(self):
        ''' Return build tree patch list. '''
        pattern = os.path.join(self.patchdir, '*')
        return [Patch(p) for p in glob.glob(pattern)]

    def export(self, spec_lines, spec_patches):
        ''' Overrides Backend.export. '''
        Backend.export(self, spec_lines, spec_patches)
        if not os.path.exists(self.patchdir):
            os.makedirs(self.patchdir)
        for patch in spec_patches:
            dest = os.path.join(self.patchdir, patch.basename)
            shutil.copyfile(patch.path, dest)


class GitBackend(Backend):
    ''' Indeed: git backend implementation. '''

    GIT_APPLY = "git am {path}\n"
    GIT_INIT = 'git init; git add .; git commit -aqm "Initial state"'

    def bp_specfile(self, spec_lines, patches):

        inited = False
        for ix, patch in _spec_patchlines(spec_lines, patches):
            git_apply_patch = self.GIT_APPLY.format(path=patch.path)
            if not inited:
                spec_lines[ix] = self.GIT_INIT + ';' + git_apply_patch
                inited = True
            else:
                spec_lines[ix] = git_apply_patch
        return spec_lines

    def get_patches(self):
        ''' Return build tree patch list. '''

        patches = []
        tempspec = os.path.join(self.workdir, 'self.TEMP_SPEC')
        if os.path.exists(tempspec):
            os.unlink(tempspec)
        for p in glob.glob(self.workdir + "/patches/*"):
            patches.append(Patch(p))
        return patches

    def export(self, spec_lines, spec_patches):
        ''' Overrides Backend.export. '''

        Backend.export(self, spec_lines, spec_patches)
        if not os.path.exists(self.patchdir):
            os.makedirs(self.patchdir)
        for patch in spec_patches:
            dest = os.path.join(self.patchdir, patch.basename)
            shutil.copyfile(patch.path, dest)

    def run_rpmbuild_bp(self, lines):
        ''' Overrides Backend.run_rpmbuild_bp. '''

        git_finish = "cd {wd}; git reset -q || :; git checkout -q . || :"
        Backend.run_rpmbuild_bp(self, lines)
        try:
            subprocess.call(git_finish.format(wd=self.builddir), shell=True)
        except subprocess.CalledProcessError:
            pass

    def reset(self, args):
        ''' Overrides Backend.reset. '''

        if os.path.exists(self.patchdir):
            shutil.rmtree(self.patchdir)
        os.environ['GIT_DIR'] = os.path.join(self.builddir, '.git')
        first = subprocess.check_output(
            "git log --pretty=format:%h  --reverse | head -1",
            shell=True,
            universal_newlines=True).strip()
        cmd = 'git format-patch -o {patchdir} {first}..HEAD'
        subprocess.check_call(cmd.format(first=first, patchdir=self.patchdir),
                              shell=True)


class Patch(object):
    ''' Base class for all patches. '''

    def __init__(self, path):
        self.path = os.path.abspath(path.strip())
        self.basename = os.path.basename(path)
        with open(self.path, 'r', errors='ignore') as f:
            self.lines = f.readlines()
        self.nr = -1

    def diff_equals(self, other):
        ''' Return True if diff in this and other patch is the same. '''
        set1 = set(self.lines)
        set2 = set(other.lines)
        return len(set1 - set2) == 0


class SpecPatch(Patch):
    ''' A patch defined in a spec. '''

    def __init__(self, line):
        ''' Setup a new patch with given name and path. '''
        name, path = line.split(':')
        Patch.__init__(self, path.strip())
        self.name = name
        self.nr = int(self.name.lower().strip().replace('patch', ''))


def _spec_patchlines(spec_lines, patches):
    ''' Return a generator of (index, patch) to all valid %patch lines
    in spec_lines.
    '''
    for ix in range(len(spec_lines)):
        line = spec_lines[ix]
        if line.strip().lower().startswith('%patch'):
            patch, msg = _patch_by_regex_in_string(patches,
                                                   '%patch([0-9]+)',
                                                   line)
            if not patch:
                print("Cannot parse %patch line: " + msg)
            else:
                yield ix, patch


def _patch_by_regex_in_string(patches, regex, string):
    ''' Return (patch number, error-msg) after extracting nr from string. '''

    match = re.search(regex, string)
    if not match:
        return None, "Cannot parse patch line: " + string
    nr = int(match.group(1))
    found = [p for p in patches if p.nr == nr]
    if not found:
        return None, "Cannot find patch definition for: " + string
    if len(found) > 1:
        return None, "Multiple patch definitions for: " + string
    return found[0], None


def _parse_arguments():
    ''' Parse the command line, return parsed arguments . '''

    parser = argparse.ArgumentParser()
    parser.add_argument(
        "command",
        choices=['import', 'export', 'status', 'reset', 'version'],
        help="Required command")
    parser.add_argument(
        "spec",
        help="Spec file [*.spec]",
        default="*.spec",
        nargs='?')
    parser.add_argument(
        "-m", "--mode",
        choices=['git', 'g', 'quilt', 'q', 'autosetup', 'a'],
        help="Work in git, quilt or autosetup mode [guessed]",
        default="guess")
    parser.add_argument(
        "-w", "--working-dir",
        help="Build directory [patchbuild]",
        default="patchbuild")
    parser.add_argument(
        "-o", "--options",
        help="Options to %%patch when importing new patches [-p1]",
        default='-p1')
    args = parser.parse_args()
    if args.command == 'version':
        print("rpmdev-patchbuild $Format:%h %ci$")
        sys.exit(0)
    matched = glob.glob(args.spec)
    if len(matched) == 0:
        print("Error: No spec file matching %s found" % args.spec)
        sys.exit(1)
    elif len(matched) > 1:
        print("Error: Multiple spec files matching %s" % args.spec)
        sys.exit(1)
    else:
        args.spec = matched[0]
    modemap = {m[0]: m for m in ['autosetup', 'git', 'quilt']}
    if args.mode in modemap:
        args.mode = modemap[args.mode]
    return args


def _parse_spec(args):
    ''' Read the spec, returns contents + the patches as a list. '''

    patches = []
    with open(args.spec, 'r') as f:
        lines = f.readlines()
    for l in lines:
        if re.match('^patch[0-9]+:', l.strip().lower()):
            patches.append(SpecPatch(l))
    return lines, patches


def _check_status(new_patches, spec_patches):
    ''' Compute state in new patches by comparing with spec_patches. '''

    status = {state: [] for state in ['clean', 'dirty', 'deleted', 'new']}
    new_by_basename = {n.basename: n for n in new_patches}
    spec_by_basename = {s.basename: s for s in spec_patches}
    for s in spec_by_basename.keys():
        if s not in new_by_basename:
            status['deleted'].append(s)
            continue
        spec_patch = spec_by_basename[s]
        new_patch = new_by_basename[s]
        if new_patch.diff_equals(spec_patch):
            status['clean'].append(s)
        else:
            status['dirty'].append(s)
    for n in new_by_basename:
        if n not in spec_by_basename:
            status['new'].append(n)
    return status


def _print_status(backend, spec_patches, args):
    ''' Do the actual print part of the status command. '''

    if not os.path.exists(args.working_dir):
        print("No working directory. Use 'export' command to initialize.")
        return
    new_patches = backend.get_patches()
    status = _check_status(new_patches, spec_patches)
    if status['deleted']:
        print('\nUnused:')
        print('    ' + '\n    '.join(sorted(status['deleted'])))
    if status['new']:
        print('\nNew:')
        print('    ' + '\n    '.join(sorted(status['new'])))
    if status['dirty']:
        print('\nModified:')
        print('    ' + '\n    '.join(sorted(status['dirty'])))
    if status['clean']:
        print('\nUnmodified:')
        print('    ' + '\n    '.join(sorted(status['clean'])))


def _find_ix(lines, regex):
    ''' Return index of first regex match in lines or -1 on error '''

    for ix in range(len(lines)):
        try:
            if re.search(regex, lines[ix], re.IGNORECASE):
                return ix
        except re.error:
            continue
    return -1


def _get_new_patch_nr(new, spec_patches, new_patches):
    ''' Return number to use for next patch. '''

    nr_warning = "Warning: cannot use patch number {}, using {}"
    last = -1
    for p in spec_patches:
        if p.nr > last:
            last = p.nr
    my_nr = last + 1

    match = re.match('^([0-9]+).*', new.basename)
    if match:
        want_nr = int(match.group(1))
        numbers = [p.nr for p in spec_patches
                   if p.nr in [n.nr for n in new_patches]]
        if want_nr in numbers:
            print(nr_warning.format(want_nr, my_nr))
        else:
            my_nr = want_nr
    return my_nr


def _insert_patch(new, spec_lines, spec_patches, args):
    ''' Insert patch at proper location in spec. '''

    def find_line(nr, num_re, stop_re):
        ''' Return ix where to insert new line with given nr, preferably
        ordered according to num_re matches or (no num_re matches) after
        the stop_re match.
        '''
        last_nr = 999999
        last_ix = -1
        for ix in reversed(range(len(spec_lines))):
            match = re.search(num_re, spec_lines[ix], re.IGNORECASE)
            if match:
                found_nr = int(match.group(1))
                if found_nr < nr:
                    return ix + 1
                elif found_nr < last_nr:
                    last_nr = found_nr
                    last_ix = ix
            if re.search(stop_re, spec_lines[ix], re.IGNORECASE):
                return last_ix if last_ix > 0 else ix + 1
        return 0

    tagline = "Patch{!s}:     {}\n".format(new.nr, new.basename)
    ix = find_line(new.nr, r'^\s*Patch([0-9]+)\s*:', r'^\s*Source[0-9]+')
    spec_lines.insert(ix, tagline)
    if ix == 0:
        print("Warning: Don't know where to put Patch:, inserted at top.")
    if not args.mode == 'autosetup':
        ix = find_line(new.nr, r'^\s*%patch([0-9]+)', r'^\s*%setup')
        spec_lines.insert(ix, '%patch{!s} {}\n'.format(new.nr, args.options))
        if ix == 0:
            print("Warning: Don't know where to put %patch, inserted at top.")
    shutil.copyfile(new.path, new.basename)
    spec_patches.append(SpecPatch(tagline))


def _kill_patch(spec_lines, victim, args):
    ''' Comment out given victim patch in spec file. '''
    state = 1
    for ix in range(len(spec_lines)):
        if state == 1:
            match = re.search(r'^\s*Patch([0-9]+).*' + victim.basename,
                              spec_lines[ix])
            if match:
                spec_lines[ix] = '# (unused) ' + spec_lines[ix]
                nr = match.group(1)
                state = 2
                continue
        elif state == 2:
            if args.mode == 'autosetup':
                return
            match = re.search(r'^\s*%Patch' + nr,
                              spec_lines[ix],
                              re.IGNORECASE)
            if match:
                spec_lines[ix] = '# (unused) ' + spec_lines[ix]
                return
    print("Error: Cannot disable patch: " + victim.basename)


def _copy_patch(basename, spec_patches, new_patches):
    ''' Copy contents from new patch p to spec_patches' patch with
    same name.
    '''
    try:
        spec = [p for p in spec_patches if p.basename == basename][0]
    except KeyError:
        print("Error: No existing spec patch with name: " + basename)
        return
    try:
        new = [p for p in new_patches if p.basename == basename][0]
    except KeyError:
        print("Error: No new spec patch with name: " + basename)
        return
    shutil.copyfile(new.path, spec.path)


def _import_patches(backend, args, spec_lines, spec_patches):
    ''' Fetch patches from backend and update spec. '''

    new_patches = backend.get_patches()
    new_patches = sorted(new_patches, key=lambda x: x.nr)
    status = _check_status(new_patches, spec_patches)
    for patch in spec_patches:
        if patch.basename in status['clean']:
            continue
        elif patch.basename in status['dirty']:
            _copy_patch(patch.basename, spec_patches, new_patches)
        elif patch.basename in status['deleted']:
            _kill_patch(spec_lines, patch, args)
        else:
            print("Error: no status for " + patch.basename)
    for patch in new_patches:
        if patch.basename in status['new']:
            patch.nr = _get_new_patch_nr(patch, spec_patches, new_patches)
            _insert_patch(patch, spec_lines, spec_patches, args)

    with open(args.spec, 'w') as f:
        f.write(''.join(spec_lines))


def _get_backend(args):
    ''' Try to find out what backend to use and return it. '''

    LIST_PATCHES = ["spectool", "-P", "-l", args.spec]
    if args.mode == 'guess':
        try:
            patchlines = subprocess.check_output(LIST_PATCHES,
                                                 universal_newlines=True)
        except (OSError, subprocess.CalledProcessError):
            print("Warning: cannot run spectool, falling back to quilt mode.")
            args.mode = 'quilt'
        else:
            args.mode = 'git'
            patchlines = patchlines.split('\n')
            patchlines = [(p.split(':'))[1].strip() for p in patchlines if p]
            for patch in patchlines:
                with open(patch, 'r') as f:
                    lines = f.readlines()
                if not lines[0].startswith('From '):
                    args.mode = 'quilt'
                    break
                if not re.match('From [0-9a-f]{30,}', lines[0]):
                    args.mode = 'quilt'
                    break
    if args.mode == 'git':
        return GitBackend(args.working_dir)
    elif args.mode == 'autosetup':
        return AutosetupBackend(args.working_dir)
    else:
        return QuiltBackend(args.working_dir)


def main():
    ''' Indeed: main program. '''

    args = _parse_arguments()
    backend = _get_backend(args)
    backend.init(args)
    spec_lines, spec_patches = _parse_spec(args)
    if args.command == 'export':
        backend.export(spec_lines.copy(), spec_patches)
    elif args.command == 'reset':
        backend.reset(args)
    elif args.command == 'status':
        _print_status(backend, spec_patches, args)
    elif args.command == 'import':
        _import_patches(backend, args, spec_lines, spec_patches)
    else:
        print("Oops...")


if __name__ == "__main__":
    main()

# vim: set expandtab: ts=4:sw=4:
